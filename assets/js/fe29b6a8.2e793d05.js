"use strict";(self.webpackChunkscalekit_docs=self.webpackChunkscalekit_docs||[]).push([[9452],{1099:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var n=s(4848),i=s(8453);const r={slug:"manage-client-secrets",title:"Best Practices for Managing Client Secrets with Scalekit",description:"Discover essential best practices for securing Client ID and Client Secret in Scalekit. Learn how to store secrets safely, avoid insecure sharing, and implement effective rotation and access control procedures.",keywords:["Client Secrets","API Credentials","Scalekit","Key Management System","KMS","Secret Rotation","Access Control","API Security","Secure Storage","Secret Management"]},c="Manage Client Secrets",o={id:"sso/guides/key-concepts/manage-client-secrets",title:"Best Practices for Managing Client Secrets with Scalekit",description:"Discover essential best practices for securing Client ID and Client Secret in Scalekit. Learn how to store secrets safely, avoid insecure sharing, and implement effective rotation and access control procedures.",source:"@site/docs/sso/guides/key-concepts/6-manage-client-secrets.mdx",sourceDirName:"sso/guides/key-concepts",slug:"/sso/guides/key-concepts/manage-client-secrets",permalink:"/docs-staging/sso/guides/key-concepts/manage-client-secrets",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{slug:"manage-client-secrets",title:"Best Practices for Managing Client Secrets with Scalekit",description:"Discover essential best practices for securing Client ID and Client Secret in Scalekit. Learn how to store secrets safely, avoid insecure sharing, and implement effective rotation and access control procedures.",keywords:["Client Secrets","API Credentials","Scalekit","Key Management System","KMS","Secret Rotation","Access Control","API Security","Secure Storage","Secret Management"]},sidebar:"ssoSidebar",previous:{title:"Normalized User Profile",permalink:"/docs-staging/sso/guides/key-concepts/user-profile"}},a={},l=[];function d(e){const t={h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"manage-client-secrets",children:"Manage Client Secrets"})}),"\n",(0,n.jsx)(t.p,{children:"Client ID and Client Secret are a form of API credentials, like a username and password. You are responsible for keeping Client Secrets safe and secure. Below are some best practices for how you can keep your secrets safe and how you can leverage some of the functionality offered by us to help you do the same."}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Whenever a client secret is generated from the Scalekit Dashboard, it is shown only once and cannot be recovered. Therefore, it should be immediately stored in a secure Key Management System (KMS), which offers encryption and access control features. It is crucial not to leave a duplicate copy of the key in the local file."}),"\n",(0,n.jsx)(t.li,{children:"Sharing of secret keys through insecure channels, such as emails, Slack, or customer support messages, should be strictly avoided."}),"\n",(0,n.jsx)(t.li,{children:"Storing client secrets within source code as hardcoded strings should be avoided. Instead, store them in your properties file or environments file. These files should not be checked into your source code repository."}),"\n",(0,n.jsx)(t.li,{children:"Establishing a Standard Operating Procedure (SOP) for rotating Client Secrets can help in case of accidental secret leakage. Having such procedures in place will ensure a swift and effective response to emergencies, minimizing business impact."}),"\n",(0,n.jsx)(t.li,{children:"Access to create, update, or read keys should be granted only to those individuals who require it for their roles. Regularly auditing access can prevent excess privilege allocation."}),"\n",(0,n.jsx)(t.li,{children:"Regular monitoring of API logs is recommended to identify potential misuse of API keys early. Developers should avoid using live mode keys when a test mode key is suitable."}),"\n",(0,n.jsx)(t.li,{children:"If suspicious activity is detected or a secret leak is suspected, the current secret should be immediately revoked from the Scalekit Dashboard, and a new one should be generated. In case of uncertainty, it is better to generate a new secret and revoke the existing one."}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>c,x:()=>o});var n=s(6540);const i={},r=n.createContext(i);function c(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);